%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (mg) ()
%%Title: (Moyata Biblioteka Logo \(Illustrator8\).ai)
%%CreationDate: 4/5/2011 5:55 PM
%%BoundingBox: 0 -531 426 -5
%%HiResBoundingBox: 0 -530.9004 425.5605 -5
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 213 -270 213 -270
%AI3_TileBox: -73.5015 -678.3799 497.6982 139.3003
%AI3_DocumentPreview: None
%AI5_ArtSize: 425.1968 530.0787
%AI5_RulerUnits: 4
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 2
%AI8_OpenToView: -69.8335 18.8335 1.5 1005 914 18 1 0 49 76 0 0
%AI5_OpenViewLayers: 77
%%PageOrigin:43 -770
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 104 128 8
%%BeginData: 20262 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7
%C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7
%C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7
%C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C8FD67C6C8C6C6C7C6C6C6C7C6C6
%C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7
%C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6
%C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7
%C6C6C6C7C8757C517C757C517C757C517C757C517C757C517C757C517C75
%7C517C757C517C757C517C757C517C757C517C757C517C757C517C757C51
%7C757C517C757C517C757C517C757C517C757C517C757C517C757C517C75
%7C517C757C517C757C517C757C517C757C51A72720272727202727272027
%272720272727202727272027272720272727202727272027272720272727
%202727272027272720272727202727272027272720272727202727272027
%272720272727202727272027272720272727202727272027272720272727
%202752F827F827277D5252277D527D2127527D5227F827527D527D527D52
%7D5252277D527D2727F827F827527D527D5227527D27FD04527D527D5227
%277D527D52592E7D5227527DF8277D7D5227527D527D5252527D5252277D
%5227527D2752527D5227F827F827F87D272727F87DFFFFA852FFFFFF52A8
%FFFFFF7D27A8FD09FFA8A8FFFFFF52F8FD0427FD04FFA927FFFF52A8FF7D
%FD05FF27A8FD04FFA8A8FFA852FFFF52A8FFFFFF7DFD05FFA8FD04FFA8FF
%FF59FFFF7D7DFFFFFF5227F827272752F827F82752FFFFFF52FFFFFF7DFF
%A8A8FFFF7DFFA8A8FFFF53A8FFFFA87D7EFFFFFF5227F827F852FFFF7D52
%2727AFFF52FFFF7EA8FFA85252277DFFA8A8FFA87DFF7D7DFFFF7DFFA8A8
%FFFF7DA8FFFF7D7DA8FFA87D7DFFA87DA8FF277DFFFFFF7DF827F827F852
%272727207DFFFFFFA8FFFFA8A8FFFF52FFFFA8FFA97DFFFF5227FFFF7D27
%FD04FF7D20FD0427FFFF7D202727FFA8A8FFFF7DA9FFA8272727A8FFA87D
%FFA8A8FFA8A8FFFFA8FFFF7DFFFF2752FFFF2727FFFF7D277DFFFF7DFFFF
%7DA8FFFFFF7D272027272752F827F82752FFFFFFA8FFFFFF7DFFA852FFFF
%7DFD05FF2752FFFF5227FFFFA8FF7D27F827F852FD04FFA852A8FFA8FFFF
%7EA8FFFFFFA8527DFF7D7DFFA87DFD05FFA8FFA87DFFFF277DFFFF2752FF
%FFA87D52FFFFA8FFFF27FFFFA8FFA8F827F827F85227F827277DFD04FFA8
%FFA8A8FFFF52FFFF7DA8FD04FF5227FFFF7D27FFA87DFFA82727F82728FF
%FFA8FFFF7DFD05FF7DA8FFFFA8FFA8A8FFA87DFFA87DFD04FFA8A8FFFF53
%FFFF2752FFFF5227FD04FF7DFD04FF7D27FFFF7DFFA8272727F82752F827
%F82752FFA8FFFFA8A8FF7DFFA852FFFF7DFFA87DFFFF2727A8FF5252FFFF
%7DFFA827F827F852FFFF52A8FFA8A8FD04FFA8A8FF7DA8FFA87DFF7E7DFF
%A87DFD05FF7DFFA87DFFFF2752FFFF2727A8FF7D2752FFFFA8A8FF7DFFA8
%A8FFFF2727F827F87C272027277DFFFFA8FF7DFFAFA8FFFF52FD04FFA87D
%FFFF5227FFFF5352FD05FF2727202752FFFF7DA8FF7DFFFFFFA8FF7DA8FF
%A87EFFA8A8FFA87DFFA87EFFFF7DFFFFA8FFFF52FFFF5252FFFF5227FFFF
%7D207DFFFF52FFFFA8FD05FF522727202752F827F82752FFA8A8FF7DA8FF
%7DFFA8A8FFFF7DFFA87DFFFF2727FFFF527DFFFF7DFFFF52F827F852FFFF
%A8FFFFA8A8FF7D7DFFA8A8FFA8FFFFFFA8FFA87DFFFF7DFFFF7DA8FF7DFF
%A8A8FFFFF853FFFF2727FFFFA9A87DFFFF7DA8FFA8FFFFA8FFFF5227F827
%F87D272727F87DFFA87DFF52FFFF527DFFFFFF537DFFA87DFFFF5227FFFF
%7D7DFFA852FFFF52FD0427FD05FF52FFFF7D7DFF7DA8FD04FFA8FFFF7D7D
%FFA87EFFFF27FFFF5284FFFFFF522752FFFF5227FD04FFA8FFFF52FD05FF
%27FFFF7DF827272752F827F8272052FD052752F827527D27272752272727
%52F827275220272727F8522727F827F82727522752F8272752F8FD042752
%2752FD0427F8FD04275227272752F827527D2727F8272752F82727522752
%2752272727522752272727522727F827F852272727202727272027272720
%272727202727272027272720272727202727272027272720272727202727
%272027272720272727202727272027272720272727202727272027272720
%272727202727272027272720272727202727272027272720272727202727
%27527BA09FA07BA09FA07BA09FA07BA09FA07BA09FA07BA09FA07BA09FA0
%7BA09FA07BA09FA07BA09FA07BA09FA07BA09FA07BA09FA07BA09FA07BA0
%9FA07BA09FA07BA09FA07BA09FA07BA09FA07BA09FA07BA09FA07BA09FA0
%7BA09FA07BA09FA07BA09FA07BA07BA7C6C6C7C6C6C6C7C6C6C6C7C6C6C6
%C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6
%C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6
%C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C8
%C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6
%C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6
%C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6
%C0C6C6C6C0C6C6C6C0C6C6C6C0C8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8
%CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8
%CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8
%CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC9FDFC
%FFFDD0FFCACFC9CEC8CEC8C9C8CEC8CEC9CFCAFFCFFD52FFCFCEC8C8C6C6
%C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C7C8CECEFD4BFFCFC8C8FD04C6C0C6
%C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C7C8CFCFFD44FFC9CD
%C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7
%C6C7C6C7C8CFFD3FFFC9C8FD27C6C8C9FD3BFFCFC7C6C6C7C6C6C6C7C6C6
%C6C7C6C79FA67C7C517C52525152517C517C7CA09FC7C6C6C6C7C6C6C6C7
%C6C6C6C7C7CEFD37FFCAC8C0C6C6C6C0C6C6C6C0C69E9F51522727F827F8
%27F827F827F827F827F827F8272752517C9FC6C6C6C0C6C6C6C0C6C6C7C9
%FD34FFC8C7C6C7C6C7C6C7C6C7A5A0522720272727202727272027272720
%27272720272727202727272027517C9FC7C6C7C6C7C6C7C6C7C8CFFD30FF
%CEFD09C6A65127F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F8274BA0FD09C6C9FD2DFFCFCDC6C6C6C7C6C6C6C79F52
%F8272727F8272727F8272727F8272727F8272727F8272727F8272727F827
%2727F8272727F8527CC7C6C7C6C6C6C7C6C8CFFD2AFFCAC7C0C6C6C6C0C6
%C6A02727F827F827F827F827F827F82727522E532E532E532F532E532E52
%2727F827F827F827F827F827F827277C9EC6C6C6C0C6C6C6C9FD28FFC9C7
%C6C7C6C7C6C7A552202727272027272720272752535A2F5A2F5A365A2F5A
%365A2F5A36362F5A2F5A5353272720272727202727272052A0C7C6C7C6C7
%C6C7C8FD26FFC8FD07C67527F827F827F827F82727522F5A2F362F362F36
%2F5A2F362F5A2F362F5A2F362F5A2F362F5A2F532727F827F827F827F827
%51C7FD06C6C7FD24FFC8C6C6C7C6C6C6C75127F8272727F82727522F5A36
%362F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A365A2F
%522727F8272727F82727A0C6C7C6C6C6C7C7FD22FFC7C6C6C6C0C6C6A0F8
%27F827F827F82727532F362F362F362F362F362F362F362F362F362F362F
%362F362F362F362F362F362F362F592827F827F827F827F876C0C6C6C6C0
%C6C6CFFD1FFFC8C7C6C7C6C7C67C202727272027272E535A36362F5A365A
%2F5A365A2F5A365A2F5A365A2F5A365A2F5A365A2F5A365A2F5A365A2F5A
%36362F522727202727272052C7C7C6C7C6C7C7FD1EFFC7FD06C676F827F8
%27F827F8532F362F362F362F362F362F362F362F362F362F362F362F362F
%362F362F362F362F362F362F362F362F362F532727F827F827F8519FFD06
%C6FD1CFFC8C7C6C6C6C7C652F8272727F82727590E3636362F3636362F36
%36362F3636362F3636362F362F362F3636362F3636362F3636362F363636
%2F3636360E5A2E27F8272727F8279FC6C6C7C6C6C7FD1AFFC8C6C0C6C6C6
%9E52F827F827F82728360D362F362F362F362F362F362F362F362F362F36
%2F2F2F5A2F2F2F362F362F362F362F362F362F362F362F362F360D362E27
%F827F827F8279FC6C0C6C6C6C7FD18FFC9C7C6C7C6C7C652272720272727
%2E3636362F3636362F3636362F3636362F3636362F362F3653A9FFA92F36
%2F362F3636362F3636362F3636362F3636362F3636362F27272720272727
%9FC7C6C7C6C7C8FD16FFC9FD06C652F827F827F8272F360D362F362F362F
%362F362F362F362F362F362F360D5A7EFD05FF5A360D360D362F362F362F
%362F362F362F362F362F362F362F27F827F827F8279FFD05C6C9FD15FFC7
%C6C7C6C6C6762727F82727272F3636362F3636362F3636362F3636362F36
%36362F362F7EA9FFFFFFA8FFFFFFA87E2F362F3636362F3636362F363636
%2F3636362F3636362F522727F8272727A5C7C6C6C6C7CFFD13FFC8C6C6C0
%C6C67CF827F827F8272F140D360D360D360D360D360D360D360D360D360D
%2F53AFFD04FF848484FD04FFA9532F0D360D360D360D360D360D360D360D
%360D360D362F28F827F827F851C0C6C6C6C0C7CFFD11FFCFC6C7C6C7C6A0
%2027272720272FFD13362F5AA8FD04FFAF84A884A884A8A9FFFFFF845A2F
%FD14362E20272727207CC6C7C6C7C6CEFD11FFFD05C6C72027F827F8272F
%360D360D360D360D360D360D360D360D360D2F2F84FD04FFA8A87DA87EA8
%7DA884A8A8FD04FF842F2F0D360D360D360D360D360D360D360D360D362F
%27F827F827F87CFD05C6CFFD0FFFC8C6C6C7C6C6FD0427F82753360E3636
%360D3636360D3636360D3614360D5A7EFD05FF84A884A884A8A8AFA8FFA8
%AFA8FD05FF5A360D3614360D3636360D3636360D3636360D362F27F82727
%27F8C8C6C6C6C7C7FD0EFFC9C6C6C6C0C67527F827F82728140D360D360D
%360D360D360D360D360D362F5AA8FFFFFFA8A87D847DFD04A8AFA8A9A8AF
%A8A8A8AFA8FFFFFFA85A0D360D360D360D360D360D360D360D360D142E27
%F827F82727C6C6C6C0C6C8FD0DFFCDC6C7C6C79F2720FD04273614361436
%143614361436143614360D365AA9FD04FFA8A884A8A8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8AFA8FD04FFA959360D361436143614361436143614361436
%2E27272720277CC7C6C7C6C7CFFD0BFFCFFD05C652F827F827F8350E360D
%360D360D360D360D140D360D597EFFFFFFA8A97EA884A9A8A9A8AFA8A8A8
%AFA8A8A8AFA8A9A8AFA8A8A8AFA8FFFFFF7E2F0D360E140D360D360D360D
%360D360E362727F827F8279FFD04C6C8FD0BFFC7C6C6C7C6A0F8272727F8
%5314361436143614361436143614362F84FD04FFA8A884A9A8FFA8FFA8AF
%A8FFA8FFA8FD0BFFA9FD06FF7E2F361436143614361436143614361459F8
%272727F87CC6C6C6C7C6FD0AFFC9C6C6C6C0C62727F827F8270D140D140D
%360D140D360E140D2F59AFFFFFFFA97EFD04A8AFA8AFA8FFA8FD18FFA953
%2F0D140D360D140D360D140D360E52F827F827F8A5C6C6C0C6C8FD09FFCD
%C6C7C6C7A027202727272F37143614361436143614362F7EA9FFFFFFAFA9
%A8AFA8FFA8FD21FFA85A2F361436143614361436143635272727202752C7
%C6C7C6C7CFFD07FFCFFD05C652F827F82728140D3614140D3614140D362F
%A8FD04FFA8A8A8AFA8FD26FF842F360D140D3614140D3614142E27F827F8
%279FFD04C6CEFD07FFC9C6C6C7C6A6F8272727F85A14361436141414360D
%5A7EFD05FFA8AFA9FD2BFF5A5A0D361436143614361436FD0427F87CC6C6
%C6C7C7FD06FFCFC7C6C6C0C65127F827F82E0E140E140D140D0D2F7EA8FF
%FFFFA8A8A8FD2FFFA85A2F0E0D140E140D141453F827F82727C7C6C6C0C6
%CAFD05FFCFC6C7C6C7C727202727272F15141414360E3659FD05FFAFFD34
%FFA959361414143614141427272720277CC7C6C7C6CEFD05FFC8FD04C6A0
%F827F82727140E1414142F5AA8FD3DFF7E5A2F140E1414142E27F827F852
%FD04C6C7FD05FFC8C6C7C6C651272727F853141414362F5959845A7E5A7E
%5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E
%5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E7E84595A
%2F361414145AF8FD0427C7C6C6C6C7CFFD04FFC6C6C0C69E27F827F8272F
%1414140D360D140D2F2F847E847E7E7E847E7E7E847E7E7E847E847E847E
%7E5A847E847E847E7E7E847E845A847E847E847E847E847E7E7E847E7E7E
%847E7E7E847E842F0D0D140D360E140D141427F827F8277BC6C6C6C0CEFF
%FFFFCEC7C6C7C6A620FD0427FD0814150D7EFD10FFA9FF84A9AF8484FFA8
%FFA9FF84FFFFA9FFFF84FFFFA9A8AFFD11FF7E14141415FD0514152E2727
%27207CC6C7C6C7C8FFFFFFCEFD04C67527F827F852FD0A145AFD0FFFA87E
%847E597E595A7E7E2F7E5A5A5A7E5A84FF5A5A7E597E7E7EFD10FF53FD0A
%1435F827F82727FD04C6C8FFFFFFC8C7C6C6C6522727F8272F15FD08140D
%7EFD10FF7EA97EFF7E847EA97E5AA8A95A847E847EAF5AFF847E7E847EFD
%10FF5A0DFD0814151427F82727279FC7C6C6C6FFFFFFC7C0C6C6C62727F8
%27F83614140E1414140E14141453A97E847EA87E847EA984A87EA87E847E
%7E5A847E847E847E7E7E847E847E7E59847E847E847E84598484847EA87E
%A884A97E847EA87E847EA953FD05140E1414140E142727F827F8A0C0C6C6
%C6C9FFFFC6C7C6C79F272727205214141415141414151414145A2F7E5A84
%5A7E5A845A362F7E5A7E597E5A7E597E5A7E597E5A7E597E5A7E59845A7E
%597E5A7E59845A7E597E5A7E53362F7E5A845A7E5A845A36141514141415
%141414151453202727277CC7C6C7C6CFFFCAFD04C6A0F827F82728FD0B14
%0D5AA8FFA8FFA8FFA87E0D357DA884A87EA884A87EA884A87EA884A87EA8
%84A87EA884A87EA884A87EA884A87EA8A87E0D5AA8FFA8FFA8FFA87E0DFD
%0A14152F27F827F876FD04C6C8FFCFC6C6C6C77C27F8272753FD0C142FA9
%FFFFA8FFA8FF59362FA884A884A87EA884A87EA884A87EA884A87EA884A8
%84A884A884A884A884A884A884A859142FA9FFFFA8FFA8FF5936FD0B145A
%2727F82751C6C6C7C6CEFFC9C6C6C6C07CF827F8272EFD0C140D7EFFFFFF
%A8AFA8350D36A8A8A8A9A8A884A884A884A884A87EA884A87DA87EA87DA8
%7E847DA87D847DA87D847D7E0D0E7EFFFFFFA8AFA82F0DFD0B140D27F827
%F851C6C6C0C6C8FFCEC6C7C6C75227202727591415141414151414141514
%150D7EFD04FFA8A92F142FFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8AFA8FFA8AFA8AFA8A9A8AFA8A9A8FF5A140D7EFD04FFA8A82F15141414
%1514141415FD04142727202727C7C6C7C6C8FFC8FD04C676F827F8272FFD
%0D142F5A535A535A2F360E5AFD06FFA8FFA8FFA8FFA8A9A8AFA8A9A8AFA8
%A9A8AFA8A9A8AFA8AFA8FFA8A9A87E0D142F5A535A535A2F36FD0D1427F8
%27F827A4C6C6C6C7FFCEC6C7C6C651272727F83614141415141414151414
%1415145AA8AFA8A9A87E0D142FFD13FFA8FFA8FFA8FFA8AFA8FFA8AFA8FF
%A8FF5914145AA8AFA8A9A87E0D15141514141415141414151414FD042720
%C7C6C6C6C7FFC8C6C0C6C652F827F8270D15FD0C142FFFFFFFA8FF591414
%2FA8FD17FFA8FFA8FFA8FFA8AFA8AFA87E0D142FFFFFFFA8FF59FD0E1428
%F827F8279FFD04C6FFCEC6C7C6C751FD0427361415141514151415141514
%1B145AFD04FFA8840E142FFD23FF5A36145AFD04FFA8840D151415141514
%15141514151415FD0527C8C6C7C6C7FFC8FD04C652F827F8270D15FD0C14
%2FFFFFFFA8FF59141435A8FD22FF7E0D142FFFFFFFA8FF59FD0C14151428
%F827F8279FFD04C6FFCEC6C6C6C75127F827273614151415141514151415
%1415145AFD04FFA87E0D142FFD23FF5A14145AFD04FFA87E0D1B14151415
%14151415141514152727F82727C7C6C7C6C7FFC8C6C6C6C052F827F8270D
%FD0D142FFFFFFFA8FF59140E36A9FD22FF7E0D142FFFFFFFA8FF590EFD0D
%1427F827F8279EC6C0C6C7FFCEC6C7C6C7522720272736141B1415141B14
%15141B141B145AFD04FFA8840D152FFD23FF7E14145AFD04FFA8840D1B14
%15141B1415141B141514152727202727C7C6C7C6C8FFC9FD04C67CF827F8
%272F151415141414151414141514142FFFFFFFA8FF7E14145AAFFD22FF7E
%0D142FFFFFFFA8FF7E141415141414151414141514151327F827F851FD04
%C6C7FFCFC6C7C6C67B272727F8591415141B1415141B1415141B145AFD04
%FFA8840E142FFD23FF5A14145AFD04FFA8840D15141B1415141B1415141B
%1436F82727274BC7C6C6C6CEFFC9C6C0C6C6A0F827F82728151414141514
%141415FD04142FFFFFFFA8FF5914142FA8FD0BFFA8A884A884A884A884A8
%A8FD0CFF7E0D142FFFFFFFA8FF59FD04141514141415141414152F27F827
%F852C0C6C6C6C8FFFFC6C7C6C79F2727272052141B141B141B141B141B14
%1B145AFD04FFA8840E152FFD0DFF7D847D847D847D84A8FD0DFF5A14145A
%FD04FFA8840E1B141B141B141B141B141B14592027272776C7C6C7C6CEFF
%FFC7C6C6C6C72027F827F8FD04141514141415FD04142FFFFFFFA8FF5914
%1435A8FD0BFFA8847D847D847D847DA8FD0DFF7E0D142FFFFFFFA8FF59FD
%04141514141415141414152E27F827F87CFD04C6C9FFFFC8C6C6C7C652F8
%2727270D1B1415141B1415141B141B145AFD04FFA87E0D152FFD0CFFAF7D
%8484A87DA8848484FD0DFF5A14145AFD04FFA87E0D1B1415141B1415141B
%141B14282727F8279FC6C6C7C6FFFFFFC9C6C6C0C65127F827F82F141514
%1414151414141514142FFFFFFFA8FF59141436A9FD0BFFA87E7D847D847D
%847DA8FD0DFF7E0D142FFFFFFFA8FF5914141514141415141414151414F8
%27F82727C7C6C6C0C7CFFFFFC9C7C6C7C6A0202727272E1B141B141B141B
%141B141B145AFD04FFA8840D1B2FFD0CFFAF7D8484A87EA884A8A8FD0DFF
%7E14145AFD04FFA8840D1B141B141B141B141B141B2F2727272076C6C7C6
%C7C8FFFFFFCFFD04C69F27F827F8271415141514151415141514142FFFFF
%FFA8FF7E14145AAFFD0BFFA8847DA87D847DA87DA8FD0DFF7E0D142FFFFF
%FFA8FF7E1414151415141514151415142EF827F82775FD04C6CEFD04FFC7
%C6C6C6C75127F8272735141B141B141B141B141B145AFD04FFA8840E152F
%FD0DFF7D847DA884A87DA8A8FD0DFF5914145AFFFFFFAFA8840E1B141B14
%1B141B141B14142727F82727A6C6C7C6C6CAFD04FFC8C6C6C6C07CF827F8
%272715141514151415141514142FFFFFFFA8FF5914142FCBFD0BFFA8847D
%847DA87D847DA8FD0DFF7E0D142FFFFFFFA8FF5914141514151415141514
%152E27F827F851C6C6C0C6C6FD05FFCFC6C7C6C79F2720272727141B141B
%141B141B14360D5A84A984A8847E0D142FA984A984A984A984A984A984A9
%7D7E7D847E847D847EA984A984A984A984A984A984A953360D5A84A984A8
%847E0D36141B141B141B141B1452272720277CC7C6C7C6CEFD05FFCFC7FD
%04C64B27F827F82F141B1415141B141453847E7E5A847E7E5A847E7E5A84
%7E7E5A847E7E5A847E7E7E847E847E847E847E847E7E5A847E7E5A847E7E
%5A847E7E7E847E7E5A847E7E7E845314141B1415141B1436F827F827F8A5
%FD04C6C9FD06FFC8C7C6C6C6A02727F8272714141B141B141B147EFD39FF
%7E141B141B141B141B2E27F8272752C6C7C6C6C7FD07FFCFC0C6C6C69E27
%F827F8272E1514151415141459FD39FF53141415141514150D27F827F827
%7BC6C0C6C6C9FD08FFCDC6C7C6C77C2720272727141B151B151B147EFD39
%FF7E141B151B151B1452272720274BC7C6C7C6C7CFFD08FFC9FD04C6C727
%27F827F82E1415FD041459FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FF
%A9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FF
%A8FFA9FFA8FFAFFF53FD0414151435F827F827F8A0FD04C6C7FD0AFFC7C7
%C6C6C67C2727F82727532F5A2F362F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A
%2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A
%2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F5A2F362F5A2727F8272752C6C7C6C6
%C6CFFD0AFFC9C0C6C6C69E27F827F82727FD042F7EA8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A87E0D2F2F2F2727F827F8
%277BC6C0C6C6C8FD0CFFC7C6C7C6C77C272027272728362F2F7EFD3BFF7E
%362F362E272727202752C7C6C7C6C7C9FD0CFFC9FD05C65127F827F8272E
%362F7EFD3BFF7E0D362F27F827F82720C7FD04C6C8FD0EFFC7C7C6C6C6C7
%2727F82727272F367EFD3BFF7E302F2E2727F82727A0C6C7C6C6C6CFFD0E
%FFCFC0C6C6C6C0A0F827F827F8272F5A7E847E847E847E847E847E847E84
%7E847E847E847E847E847E847E847E847E847E847E847E847E847E847E84
%7E847E847E847E847E847E847E847E5A0D2EF827F827F852C6C6C0C6C6C9
%FD10FFCEC6C7C6C7C67C202727272052595A595A5A5A595A5A5A595A5A5A
%595A5A5A595A5A5A595A5A5A595A5A5A595A5A5A595A5A5A595A5A5A595A
%5A5A595A5A5A595A5A5A595A5A5A595A5A52202727272052C6C7C6C7C6C7
%FD11FFCFC7FD05C652F827F827F852FD3BFF7DF827F827F8279FFD05C6CA
%FD12FFCAC7C6C6C6C7C727F8272727F852FD39FF7DF8272727F8279FC6C6
%C7C6C6C9FD14FFC8C6C6C6C0C69F27F827F827F852A8FD36FF52F827F827
%F82775C6C6C6C0C6C7FD16FFC8C7C6C7C6C79F27272720272727A8FD33FF
%AF522727202727277CC7C6C7C6C7C7FD18FFC7FD05C69F27F827F827F827
%535A535A2F5A535A2F5A535A2F5A535A2F5A535A2F5A535A2F5A535A2F5A
%535A2F5A535A2F5A535A2F5A535A2F5A535A2F5A5927F827F827F82775FD
%06C6CFFD19FFC7C6C6C7C6C69F272727F827272728847E7E5A847E7E5A84
%7E7E5A847E7E5A847E7E5A847E7E5A847E7E5A847E7E5A847E7E5A847E7E
%5A847E7E5A847E8452272727F82727277BC7C6C6C6C7C6CFFD1AFFCFC6C6
%C0C6C6C69F27F827F827F82727A8FD2CFF5227F827F827F8277BC6C0C6C6
%C6C0CEFD1CFFCFC6C7C6C7C6C7A552202727272027277DFD29FFA8272720
%27272720279FC7C6C7C6C7C6CFFD1EFFCFFD07C652F827F827F827F8277D
%FD25FF7D52F827F827F827F84B9FFD06C6CEFD20FFCFC6C7C6C6C6C7C67C
%F8272727F8FD04277EAFFFA9FFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFF
%FFAFFFFFFFAFFFFFFFA9FFFFA828272727F8272727F87CC6C6C6C7C6C6C6
%CFFD22FFCFC7C6C6C6C0C6C69F2727F827F827F827F82728532F5A2F2F2F
%352F2F2F352F2F2F352F2F2F352F2F2F352F2F2F5A2F532827F827F827F8
%27F827277CC0C6C6C6C0C6C6CFFD25FFC8C7C6C7C6C7C6C77C2720272727
%202727272052527E7EA9A9AFA9AFA8A9A8A9A8A9A8AFA8A9A8AFA9A98484
%5352F827272720272727202752C7C6C7C6C7C6C7C7CFFD27FFC8FD07C69F
%52F827F827F827F827F827F827287D7DA8A8FD09FFA8A87D7D5227F827F8
%27F827F827F827F8517BFD07C6C7FD2AFFCEC7C6C7C6C6C6C7C6A6512727
%27F8272727F8272727F8FD062752275228FD0527F8272727F8272727F8FD
%0427A0C6C6C6C7C6C6C6C7C9FD2CFFCFC8C0C6C6C6C0C6C6C69F762727F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F8527BC6C0C6C6C6C0C6C6C7C9FD2FFFCFC7C7C6C7C6C7C6C7C6C77B76
%272720272727202727272027272720272727202727272027272720272752
%76C8C6C7C6C7C6C7C6C7C6CEFD33FFC8FD0AC6C77B762727F827F827F827
%F827F827F827F827F827F827F827275275A6FD0AC6C7CFFD35FFCFCDC6C7
%C6C6C6C7C6C6C6C7C6C79FA07C7C5152272720272727202727514B7C76A0
%9FC7C6C6C6C7C6C6C6C7C6C6C6CDCEFD39FFCFC8C6C6C6C0C6C6C6C0C6C6
%C6C0C6C6C69EC79EA59FA59FA59FC7C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0
%C6C7CFFD3DFFCFCEC7C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7
%C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6CECFFD42FFC9CEC7FD1EC6C8C9FD48
%FFCFCEC8C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C6C6C7C6C7C8CECF
%FD4EFFCACFC9C9C8C8C7C7C0C6C6C6C0C6C6C7C7C8C8C9C9CFCFFD28FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (blend 1)
(blend 1) 0 2 Bd
[
<
999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0
C1C2C3C4C5C6C7C8C9CACBCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9
EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F
3E3D3C3B3A3938373635343231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716
1514131211100F0E0D0C0B0A09080706050403020100
>
0
<
333232313130302F2F2E2E2D2D2C2C2B2B2A2A29292828272726262525242423232222212120201F
1F1E1E1D1D1C1C1B1B1A1A19191818171716161515141413131212111110100F0F0E0E0D0D0C0C0B
0B0A0A09090808070706060505040403030202010100
>
1 %_Br
[
1 0 0 0 1 50 100 %_BS
%_1 0 0 0 1 50 100 Bs
0.6 0.4 0 0.2 1 50 0 %_BS
%_0.6 0.4 0 0.2 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
Bb
2 (blend 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(blend 1)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
u
*u
1 D
0 O
0 0.2 1 0 k
0 J 0 j 1 w 4 M []0 d0 XR
212.1816 -109.5283 m
153.9995 -109.5283 104.3286 -130.0752 63.1021 -171.1011 C
22.0762 -212.3271 1.66211 -262.0654 1.66211 -320.1807 C
1.66211 -378.2969 22.0762 -427.835 63.1021 -468.8604 C
104.3286 -510.1533 153.9995 -530.834 212.1816 -530.9004 C
270.3643 -530.834 320.0352 -510.1533 361.1279 -468.8604 C
402.2881 -427.835 422.9004 -378.2969 422.835 -320.1807 C
422.9004 -262.0654 402.2881 -212.3271 361.1279 -171.1011 C
320.0352 -130.0752 270.3643 -109.5283 212.1816 -109.5283 C
f
*U
*u
425.5605 -90.1123 m
425.5605 -5 L
0 -5 L
0 -90.1123 L
425.5605 -90.1123 L
f
*U
U
u
*u
212.1816 -142.1768 m
163.1089 -142.2432 121.2183 -159.5991 86.5083 -194.2422 C
51.9321 -228.8848 34.6436 -270.7754 34.6436 -319.7158 C
34.6436 -368.7881 51.9321 -410.6123 86.5083 -445.2559 C
121.2183 -480.0313 163.1089 -497.3203 212.1816 -497.2539 C
261.1875 -497.3203 302.9453 -480.0313 337.5225 -445.2559 C
372.2988 -410.6123 389.6543 -368.7881 389.7197 -319.7158 C
389.6543 -270.7754 372.2988 -228.8848 337.5225 -194.2422 C
302.9453 -159.5991 261.1875 -142.2432 212.1816 -142.1768 C
Bb
1 (blend 1) 8670.3457 15016.2578 0 1089.4353 0 0.294 -0.3259 0 5878.5005 3122.8501 Bg
0 -320.294 -356.3798 0 390.3711 -96.1108 Xm
0 -4849.5771 -356.3798 0 390.3711 4753.4663 Bc
0 -320.294 -356.3798 0 390.3711 -96.1108 Bm
0 -4849.5771 -356.3798 0 390.3711 -416.4053 Bc
f
0 BB
*U
U
u
*u
0.694 0.341 0 0.224 k
57.1846 -407.3545 m
64.8975 -420.8525 74.6729 -433.4863 86.5083 -445.2559 C
121.2183 -480.0313 163.1089 -497.3203 212.1816 -497.2539 C
261.1875 -497.3203 302.9453 -480.0313 337.5225 -445.2559 C
349.3584 -433.4863 359.1992 -420.8525 366.9795 -407.3545 C
57.1846 -407.3545 L
f
*U
U
u
*u
353.3477 -265.5894 m
354.5449 -261.0679 L
211.2505 -179.9458 L
68.1563 -261.0679 L
69.353 -265.5894 L
88.5029 -265.5894 L
88.5029 -287.7979 L
93.7563 -287.7979 L
97.9458 -307.4141 L
97.9458 -385.0127 L
88.5029 -385.0127 L
88.5029 -408.0195 L
84.0479 -408.0195 L
84.0479 -431.1582 L
76.7998 -431.1582 L
76.7998 -434.9492 L
79.792 -438.2734 82.8511 -441.5986 86.1099 -444.9229 C
86.1099 -440.4688 L
336.5254 -440.4688 L
336.5254 -446.2529 L
336.8574 -445.9209 337.1895 -445.5889 337.5225 -445.2559 C
340.3818 -442.3965 343.1738 -439.4043 345.834 -436.4785 C
345.834 -431.1582 L
339.0518 -431.1582 L
339.0518 -408.0195 L
334.1309 -408.0195 L
334.1309 -385.0127 L
326.751 -385.0127 L
326.751 -307.9463 L
331.4053 -287.7979 L
334.1309 -287.7979 L
334.1309 -265.5894 L
353.3477 -265.5894 L
f
0 D
95.4185 -256.2803 m
211.2505 -190.6509 L
327.2158 -256.2803 L
95.4185 -256.2803 L
f
123.7446 -292.1201 m
121.75 -300.7646 L
106.0576 -300.7646 L
104.1958 -292.1201 L
123.7446 -292.1201 L
f
134.3174 -287.7979 m
135.1152 -287.7979 L
135.1152 -385.0127 L
129.6631 -385.0127 L
129.6631 -307.9463 L
134.3174 -287.7979 L
f
144.4248 -381.2891 m
144.4248 -292.1201 L
280.2051 -292.1201 L
280.2051 -381.2891 L
144.4248 -381.2891 L
f
120.354 -314.3965 m
120.354 -381.1553 L
107.2539 -381.1553 L
107.2539 -314.3965 L
120.354 -314.3965 L
f
97.812 -278.4893 m
97.812 -270.1108 L
324.8223 -270.1108 L
324.8223 -278.4893 L
97.812 -278.4893 L
f
93.3569 -425.5732 m
93.3569 -417.3281 L
329.7432 -417.3281 L
329.7432 -425.5732 L
93.3569 -425.5732 L
f
97.812 -402.6328 m
97.812 -394.3213 L
324.8223 -394.3213 L
324.8223 -402.6328 L
97.812 -402.6328 L
f
303.0117 -300.7646 m
301.2168 -292.1201 L
320.833 -292.1201 L
318.8379 -300.7646 L
303.0117 -300.7646 L
f
289.5146 -287.7979 m
290.8438 -287.7979 L
295.0332 -308.1455 L
295.0332 -385.0127 L
289.5146 -385.0127 L
289.5146 -287.7979 L
f
304.3418 -314.3965 m
317.4414 -314.3965 L
317.4414 -381.1553 L
304.3418 -381.1553 L
304.3418 -314.3965 L
f
*U
*u
1 D
120.6196 -472.3857 m
130.7271 -478.5684 141.3657 -483.6895 152.4702 -487.5459 C
271.8262 -487.5459 L
282.8643 -483.6895 293.4375 -478.5684 303.5439 -472.3857 C
120.6196 -472.3857 L
f
*U
*u
187.9775 -495.791 m
195.8247 -496.7891 203.8701 -497.2539 212.1816 -497.2539 C
220.4268 -497.2539 228.4727 -496.7891 236.3857 -495.791 C
187.9775 -495.791 L
f
*U
*u
90.0327 -448.7129 m
95.9502 -454.2988 102.001 -459.4189 108.2515 -464.0732 C
315.8457 -464.0732 L
322.0957 -459.4189 328.1475 -454.2988 333.998 -448.7129 C
90.0327 -448.7129 L
f
*U
U
u
*u
1 g
211.2505 -185.3315 m
77.7314 -260.9346 L
344.9033 -260.9346 L
211.2505 -185.3315 L
f
*U
*u
125.4736 -305.4189 m
129.5967 -287.4658 L
98.4106 -287.4658 L
102.2676 -305.4189 L
125.4736 -305.4189 L
f
*U
*u
139.7695 -287.4658 m
139.7695 -385.9434 L
284.8604 -385.9434 L
284.8604 -287.4658 L
139.7695 -287.4658 L
f
*U
*u
125.0083 -385.8105 m
125.0083 -309.7412 L
102.5996 -309.7412 L
102.5996 -385.8105 L
125.0083 -385.8105 L
f
*U
*u
88.7031 -412.6738 m
88.7031 -430.2939 L
334.3975 -430.2939 L
334.3975 -412.6738 L
88.7031 -412.6738 L
f
*U
*u
81.4546 -440.0693 m
83.1172 -441.7979 84.7798 -443.5938 86.5083 -445.2559 C
89.3013 -448.1152 92.1602 -450.7754 95.0859 -453.3682 C
328.9443 -453.3682 L
331.8701 -450.7754 334.7305 -448.1152 337.5225 -445.2559 C
338.7197 -443.9922 339.9824 -442.7295 341.1797 -441.5322 C
341.1797 -435.8135 L
81.4546 -435.8135 L
81.4546 -440.0693 L
f
*U
*u
140.6343 -482.8906 m
162.5107 -492.4668 186.3154 -497.3203 212.1816 -497.2539 C
237.9814 -497.3203 261.7861 -492.4668 283.5957 -482.8906 C
140.6343 -482.8906 L
f
*U
*u
102.2007 -459.4189 m
110.6455 -466.2012 119.4893 -472.0527 128.6655 -477.04 C
295.5645 -477.04 L
304.6738 -472.0527 313.4521 -466.2012 321.8965 -459.4189 C
102.2007 -459.4189 L
f
*U
*u
93.1577 -389.667 m
93.1577 -407.2881 L
329.4775 -407.2881 L
329.4775 -389.667 L
93.1577 -389.667 L
f
*U
*u
299.2227 -305.4189 m
322.5615 -305.4189 L
326.6836 -287.4658 L
295.498 -287.4658 L
299.2227 -305.4189 L
f
*U
*u
322.0957 -309.7412 m
299.6875 -309.7412 L
299.6875 -385.8105 L
322.0957 -385.8105 L
322.0957 -309.7412 L
f
*U
*u
93.1577 -283.1436 m
329.4775 -283.1436 L
329.4775 -265.4561 L
93.1577 -265.4561 L
93.1577 -283.1436 L
f
*U
U
u
*u
0.051 0 0 0.122 k
200.7451 -385.9434 m
200.7451 -355.623 L
224.2178 -354.4922 L
233.8584 -344.7168 L
188.1108 -344.7168 L
188.1108 -385.9434 L
200.7451 -385.9434 L
f
*U
U
u
*u
271.2939 -229.2842 m
229.8027 -206.6094 L
185.5181 -219.3096 144.5576 -235.7334 106.9219 -255.8813 C
168.8276 -231.7441 223.5518 -222.8999 271.2939 -229.2842 C
f
*U
*u
0.09 0 0.008 0.255 k
211.5835 -197.0342 m
106.9219 -255.8813 L
144.5576 -235.7334 185.5181 -219.3096 229.8027 -206.6094 C
211.5835 -197.0342 L
f
*U
*u
139.7695 -287.4658 m
139.7695 -297.373 L
284.8604 -304.3555 L
284.8604 -287.4658 L
139.7695 -287.4658 L
f
*U
*u
0.051 0 0 0.122 k
139.7695 -297.373 m
139.7695 -303.0918 L
284.8604 -317.7207 L
284.8604 -304.3555 L
139.7695 -297.373 L
f
*U
*u
126.8037 -299.7012 m
127.8672 -295.4453 128.7979 -291.3223 129.5967 -287.4658 C
98.4106 -287.4658 L
99.6743 -293.3838 L
110.4463 -294.1152 119.4893 -296.2432 126.8037 -299.7012 C
f
*U
*u
0.102 0 0.02 0.294 k
194.2949 -349.7715 m
194.2949 -385.9434 L
229.0049 -385.9434 L
229.0049 -349.7715 L
194.2949 -349.7715 L
f
*U
*u
0.051 0 0 0.122 k
323.8252 -299.9004 m
326.6836 -287.4658 L
295.498 -287.4658 L
296.8281 -293.7158 L
307.7998 -294.248 316.7773 -296.3105 323.8252 -299.9004 C
f
*U
U
u
*u
127.8013 -289.5273 m
117.0952 -289.5273 L
114.9014 -305.4189 L
124.2773 -305.4189 L
127.8013 -289.5273 L
f
*U
*u
124.2104 -309.7412 m
115.0347 -309.7412 L
117.0952 -335.1426 117.0288 -360.4766 114.8345 -385.8105 C
124.2104 -385.8105 L
124.2104 -309.7412 L
f
*U
*u
0.094 0 0.027 0.384 k
194.2949 -385.9434 m
200.7451 -385.9434 L
200.7451 -354.3584 L
224.416 -354.3584 L
229.0049 -349.7041 L
194.2949 -349.7041 L
194.2949 -385.9434 L
f
*U
*u
0.051 0 0 0.122 k
311.9229 -305.4189 m
321.2314 -305.4189 L
324.29 -289.5273 L
314.0508 -289.5273 L
311.9229 -305.4189 L
f
*U
*u
321.2979 -309.874 m
312.0557 -309.874 L
314.0508 -335.209 313.917 -360.4766 311.5898 -385.8105 C
321.2979 -385.8105 L
321.2979 -309.874 L
f
*U
U
u
*u
0 g
212.3149 -129.6094 m
159.7183 -129.6094 114.7681 -148.1616 77.4648 -185.3315 C
40.2949 -222.6343 21.7427 -267.584 21.7427 -320.1807 C
21.7427 -372.7773 40.2949 -417.5947 77.4648 -454.6309 C
114.7681 -492.001 159.7183 -510.6191 212.3149 -510.6855 C
264.9111 -510.6191 309.7949 -492.001 346.8984 -454.6309 C
384.2686 -417.5947 402.8857 -372.7773 402.8857 -320.1807 C
402.8857 -267.584 384.2686 -222.6343 346.8984 -185.3315 C
309.7949 -148.1616 264.9111 -129.6094 212.3149 -129.6094 C
f
0 D
91.4292 -199.2949 m
124.875 -166.0483 165.1045 -149.4243 212.248 -149.3584 C
259.3926 -149.4243 299.5547 -166.0483 332.8018 -199.2949 C
366.248 -232.6748 382.9385 -272.9697 382.9385 -320.1143 C
382.9385 -367.1914 366.248 -407.2881 332.8018 -440.5352 C
299.5547 -473.915 259.3926 -490.6719 212.248 -490.6719 C
165.1045 -490.6719 124.875 -473.915 91.4292 -440.5352 C
58.1816 -407.2881 41.5581 -367.1914 41.5581 -320.1143 C
41.5581 -272.9697 58.1816 -232.6748 91.4292 -199.2949 C
f
*U
*u
1 D
425.5605 -75.6826 m
425.5605 -19.4292 L
0 -19.4292 L
0 -75.6826 L
425.5605 -75.6826 L
f
*U
U
u
u
u
*u
1 g
174.0142 -35.188 m
183.5894 -35.188 L
183.5894 -28.5386 L
164.04 -28.5386 L
164.04 -66.9722 L
175.5439 -66.9722 L
178.8682 -66.9722 181.2617 -66.7725 182.7915 -66.5068 C
184.2539 -66.1738 185.3848 -65.376 186.1826 -64.1128 C
186.9136 -62.916 187.2461 -60.855 187.2461 -57.9956 C
187.2461 -50.4814 L
187.2461 -47.8218 186.8477 -45.8936 186.1162 -44.6963 C
185.3179 -43.4336 184.1211 -42.6357 182.5259 -42.2368 C
180.9956 -41.9043 178.6689 -41.7041 175.5439 -41.7041 C
174.0142 -41.7041 L
174.0142 -35.188 L
f
0 D
176.8071 -48.354 m
177.0728 -48.6865 177.2725 -49.6172 177.2725 -51.2793 C
177.2725 -56.7988 L
177.2725 -58.5278 177.0063 -59.5254 176.6074 -59.8574 C
176.1421 -60.1895 175.2769 -60.3232 174.0142 -60.3232 C
174.0142 -47.7554 L
175.5439 -47.7554 176.4746 -47.9551 176.8071 -48.354 C
f
*U
U
u
*u
1 D
211.6494 -28.5386 m
203.272 -28.5386 L
197.686 -45.8936 L
197.686 -28.5386 L
189.3076 -28.5386 L
189.3076 -66.9722 L
198.0845 -66.9722 L
203.272 -49.4844 L
203.272 -66.9722 L
211.6494 -66.9722 L
211.6494 -28.5386 L
f
*U
U
u
*u
224.1504 -35.188 m
233.7256 -35.188 L
233.7256 -28.5386 L
214.1768 -28.5386 L
214.1768 -66.9722 L
225.6797 -66.9722 L
229.0049 -66.9722 231.3984 -66.7725 232.9277 -66.5068 C
234.3906 -66.1738 235.5215 -65.376 236.3184 -64.1128 C
237.0508 -62.916 237.3828 -60.855 237.3828 -57.9956 C
237.3828 -50.4814 L
237.3828 -47.8218 236.9844 -45.8936 236.252 -44.6963 C
235.4551 -43.4336 234.2578 -42.6357 232.6621 -42.2368 C
231.1318 -41.9043 228.8047 -41.7041 225.6797 -41.7041 C
224.1504 -41.7041 L
224.1504 -35.188 L
f
0 D
224.1504 -47.7554 m
225.6797 -47.7554 226.6104 -47.9551 226.9434 -48.354 C
227.21 -48.6865 227.4092 -49.6172 227.4092 -51.2793 C
227.4092 -56.7988 L
227.4092 -58.5278 227.1426 -59.5254 226.7441 -59.8574 C
226.2783 -60.1895 225.4141 -60.3232 224.1504 -60.3232 C
224.1504 -47.7554 L
f
*U
U
u
*u
1 D
250.0176 -36.2524 m
252.9424 -36.2524 L
252.9424 -66.9722 L
262.916 -66.9722 L
262.916 -28.5386 L
239.9766 -28.5386 L
239.9766 -56.7988 L
239.9766 -58.5942 239.7764 -59.5908 239.3105 -59.9243 C
238.8457 -60.1895 238.0479 -60.3232 236.7842 -60.3232 C
236.7842 -66.9722 L
238.3809 -66.9722 L
241.6387 -66.9722 244.0322 -66.7725 245.5615 -66.5068 C
247.0244 -66.1738 248.1553 -65.376 248.8857 -64.1128 C
249.6182 -62.916 250.0176 -60.855 250.0176 -57.9956 C
250.0176 -36.2524 L
f
*U
U
u
*u
287.7188 -28.5386 m
279.4072 -28.5386 L
273.8223 -45.8936 L
273.8223 -28.5386 L
265.4434 -28.5386 L
265.4434 -66.9722 L
274.2207 -66.9722 L
279.4072 -49.4844 L
279.4072 -66.9722 L
287.7188 -66.9722 L
287.7188 -28.5386 L
f
*U
U
u
*u
312.3223 -36.1855 m
312.1221 -34.5898 311.5234 -33.127 310.5264 -31.7969 C
309.5283 -30.4668 308.1982 -29.4697 306.6035 -28.8042 C
304.9404 -28.1396 303.0791 -27.8076 301.084 -27.8076 C
298.8896 -27.8076 296.9609 -28.1396 295.3652 -28.8711 C
293.7031 -29.5366 292.4395 -30.6001 291.5088 -31.9297 C
290.5117 -33.2598 289.9795 -34.7227 289.7793 -36.3184 C
289.5811 -37.9146 289.5146 -40.6406 289.5146 -44.4971 C
289.5146 -51.0801 L
289.5146 -55.0034 289.5811 -57.7959 289.7793 -59.3257 C
289.9795 -60.9209 290.5781 -62.3838 291.5762 -63.7139 C
292.5732 -65.1104 293.9023 -66.1079 295.498 -66.7725 C
297.1611 -67.438 299.0225 -67.7705 301.084 -67.7705 C
303.2129 -67.7705 305.1396 -67.3711 306.7354 -66.7061 C
308.3984 -65.9751 309.6611 -64.9771 310.6592 -63.6475 C
311.5898 -62.3174 312.1221 -60.855 312.3223 -59.2588 C
312.5205 -57.6631 312.5879 -54.937 312.5879 -51.0801 C
312.5879 -44.4971 L
312.5879 -40.5078 312.5205 -37.7813 312.3223 -36.1855 C
f
0 D
299.8867 -34.8555 m
300.1533 -34.4565 300.5527 -34.2573 301.084 -34.2573 C
301.749 -34.2573 302.1475 -34.5234 302.3477 -35.0552 C
302.5469 -35.521 302.6133 -36.6509 302.6133 -38.4463 C
302.6133 -56.0674 L
302.6133 -58.3281 302.5469 -59.791 302.3477 -60.3892 C
302.1475 -60.9878 301.6816 -61.2539 301.0186 -61.2539 C
300.3525 -61.2539 299.9531 -60.9878 299.7539 -60.4561 C
299.5547 -59.9907 299.4883 -58.5942 299.4883 -56.3335 C
299.4883 -38.4463 L
299.4883 -36.4517 299.6211 -35.2549 299.8867 -34.8555 C
f
*U
U
u
*u
1 D
329.0117 -36.2524 m
334.9297 -36.2524 L
334.9297 -28.605 L
313.1855 -28.605 L
313.1855 -36.2524 L
319.0371 -36.2524 L
319.0371 -66.9722 L
329.0117 -66.9722 L
329.0117 -36.2524 L
f
*U
U
u
*u
353.3477 -36.2524 m
353.3477 -28.605 L
336.7246 -28.605 L
336.7246 -66.9722 L
354.0137 -66.9722 L
354.0137 -59.2588 L
346.6992 -59.2588 L
346.6992 -50.8145 L
352.9492 -50.8145 L
352.9492 -43.5664 L
346.6992 -43.5664 L
346.6992 -36.2524 L
353.3477 -36.2524 L
f
*U
U
u
*u
378.9482 -34.3237 m
378.9482 -31.3984 379.4141 -29.4697 380.2773 -28.5386 C
371.1025 -28.5386 L
370.1045 -29.5366 369.5723 -31.3984 369.5059 -34.124 C
369.3066 -41.6377 L
369.2402 -43.6997 368.3086 -44.7637 366.3809 -44.7637 C
366.3145 -28.5386 L
356.3408 -28.5386 L
356.3408 -66.9722 L
366.3145 -66.9722 L
366.3809 -50.6812 L
367.3125 -50.748 368.0439 -51.0137 368.6416 -51.6123 C
369.2402 -52.1445 369.5059 -52.9419 369.5059 -53.873 C
369.5059 -61.3862 L
369.5059 -64.1128 370.0381 -65.9751 371.1025 -66.9722 C
380.2773 -66.9722 L
379.4141 -65.709 378.9482 -63.6475 378.9482 -60.7217 C
379.0811 -54.6045 L
379.0811 -50.6147 376.8203 -48.2871 372.2988 -47.7554 C
376.8203 -47.1572 379.0811 -44.8965 379.0811 -40.9067 C
378.9482 -34.3237 L
f
*U
U
u
*u
399.0957 -28.605 m
384.667 -28.605 L
379.6133 -66.9722 L
389.9199 -66.9722 L
390.5186 -60.0566 L
394.1094 -60.0566 L
394.5742 -66.9722 L
404.8145 -66.9722 L
399.0957 -28.605 L
f
0 D
393.8428 -53.2744 m
390.3857 -53.2744 L
390.585 -49.8838 391.25 -44.4971 392.2471 -37.1162 C
392.7793 -43.5664 393.3105 -48.8857 393.8428 -53.2744 C
f
*U
U
U
u
u
*u
1 D
120.2876 -66.9722 m
130.5933 -66.9722 L
131.1919 -60.0566 L
134.7827 -60.0566 L
135.3154 -66.9722 L
145.5547 -66.9722 L
139.8359 -28.605 L
125.4067 -28.605 L
120.2876 -66.9722 L
f
0 D
134.5166 -53.2744 m
131.1255 -53.2744 L
131.3252 -49.8838 131.9902 -44.4971 132.9878 -37.1162 C
133.5195 -43.5664 134.0508 -48.8857 134.5166 -53.2744 C
f
*U
U
u
*u
1 D
116.2974 -36.2524 m
122.2153 -36.2524 L
122.2153 -28.605 L
100.4058 -28.605 L
100.4058 -36.2524 L
106.3237 -36.2524 L
106.3237 -66.9722 L
116.2974 -66.9722 L
116.2974 -36.2524 L
f
*U
U
u
*u
98.7432 -28.5386 m
91.6284 -28.5386 L
88.3037 -28.5386 85.8433 -28.605 84.314 -28.8042 C
82.7183 -28.8711 81.3882 -29.2705 80.1914 -29.9351 C
78.9277 -30.5337 78.0635 -31.5977 77.3984 -33.0601 C
76.7998 -34.4565 76.4683 -36.4517 76.4683 -39.0449 C
76.4683 -41.9043 76.7998 -43.833 77.4648 -44.9629 C
78.1968 -46.0269 79.6592 -46.6914 81.9199 -46.8911 C
80.2578 -47.3569 79.061 -47.8882 78.2637 -48.5537 C
77.5317 -49.2183 76.9995 -50.0825 76.7998 -51.0801 C
76.5337 -52.0776 76.4683 -53.5405 76.4683 -55.5356 C
76.4683 -66.9722 L
85.7109 -66.9722 L
85.7109 -53.0747 L
85.7109 -51.6123 85.9097 -50.748 86.3091 -50.3486 C
86.6406 -49.8838 87.5054 -49.6836 88.7695 -49.6836 C
88.7695 -66.9722 L
98.7432 -66.9722 L
98.7432 -28.5386 L
f
0 D
86.375 -35.7202 m
86.7744 -35.3877 87.4395 -35.188 88.2373 -35.188 C
88.7695 -35.188 L
88.7695 -43.6328 L
87.4395 -43.6328 86.6406 -43.4336 86.3091 -43.0342 C
85.9097 -42.5693 85.7109 -41.6377 85.7109 -40.2417 C
85.7109 -38.1138 L
85.7109 -36.917 85.9097 -36.1191 86.375 -35.7202 C
f
*U
U
u
*u
1 D
74.4058 -36.1855 m
74.2734 -34.5898 73.6748 -33.127 72.6772 -31.7969 C
71.6807 -30.4668 70.3506 -29.4697 68.688 -28.8042 C
67.0918 -28.1396 65.23 -27.8076 63.1689 -27.8076 C
61.0415 -27.8076 59.1128 -28.1396 57.4507 -28.8711 C
55.855 -29.5366 54.5913 -30.6001 53.5938 -31.9297 C
52.6631 -33.2598 52.0645 -34.7227 51.9321 -36.3184 C
51.7319 -37.9146 51.5986 -40.6406 51.5986 -44.4971 C
51.5986 -51.0801 L
51.5986 -55.0034 51.7319 -57.7959 51.9321 -59.3257 C
52.0645 -60.9209 52.6631 -62.3838 53.6606 -63.7139 C
54.6572 -65.1104 55.9873 -66.1079 57.6499 -66.7725 C
59.2461 -67.438 61.1079 -67.7705 63.1689 -67.7705 C
65.3628 -67.7705 67.2251 -67.3711 68.8872 -66.7061 C
70.4834 -65.9751 71.8135 -64.9771 72.7441 -63.6475 C
73.6748 -62.3174 74.2734 -60.855 74.4727 -59.2588 C
74.606 -57.6631 74.7393 -54.937 74.7393 -51.0801 C
74.7393 -44.4971 L
74.7393 -40.5078 74.606 -37.7813 74.4058 -36.1855 C
f
0 D
62.0391 -34.8555 m
62.3047 -34.4565 62.7036 -34.2573 63.2358 -34.2573 C
63.834 -34.2573 64.2329 -34.5234 64.4326 -35.0552 C
64.6318 -35.521 64.7646 -36.6509 64.7646 -38.4463 C
64.7646 -56.0674 L
64.7646 -58.3281 64.6318 -59.791 64.4326 -60.3892 C
64.2329 -60.9878 63.834 -61.2539 63.1689 -61.2539 C
62.5034 -61.2539 62.0391 -60.9878 61.9053 -60.4561 C
61.7061 -59.9907 61.5732 -58.5942 61.5732 -56.3335 C
61.5732 -38.4463 L
61.5732 -36.4517 61.7061 -35.2549 62.0391 -34.8555 C
f
*U
U
u
*u
1 D
49.8032 -28.605 m
36.8369 -28.605 L
34.5767 -46.4917 L
33.1133 -36.7173 L
32.7144 -33.5923 32.3159 -30.8662 31.9165 -28.605 C
19.0171 -28.605 L
19.0171 -66.9722 L
27.7275 -66.9722 L
27.7944 -41.6377 L
31.4512 -66.9722 L
37.6357 -66.9722 L
41.0928 -41.0396 L
41.0928 -66.9722 L
49.8032 -66.9722 L
49.8032 -28.605 L
f
*U
U
U
U
U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 2 79 255 79 0 50 Lb
(Layer 3) Ln
0 A
u
*u
0 D
0 O
0.694 0.341 0 0.224 k
0 J 0 j 1 w 4 M []0 d0 XR
169.1763 -277.5889 m
168.7861 -278.7129 168.2065 -279.5654 167.438 -280.1445 c
166.6694 -280.7236 165.7339 -281.0146 164.6318 -281.0146 c
163.9365 -281.0146 163.3062 -280.8936 162.7412 -280.6533 c
162.1758 -280.4141 161.6646 -280.0527 161.2065 -279.5732 c
160.7715 -279.1143 160.4312 -278.582 160.1851 -277.9746 c
159.939 -277.3672 159.8164 -276.7461 159.8164 -276.1143 c
159.8164 -275.4639 159.9277 -274.8545 160.1514 -274.2861 c
160.3745 -273.7188 160.7036 -273.2002 161.1387 -272.7314 c
161.6191 -272.2168 162.1592 -271.8271 162.7583 -271.5605 c
163.3574 -271.2949 163.9985 -271.1621 164.6826 -271.1621 c
165.751 -271.1621 166.6777 -271.458 167.4634 -272.0479 c
168.249 -272.6396 168.8198 -273.4688 169.1763 -274.5361 c
167.3364 -274.5361 L
167.0425 -273.9658 166.6636 -273.5391 166.2002 -273.2559 c
165.7368 -272.9736 165.1831 -272.832 164.5386 -272.832 c
163.7075 -272.832 163.0024 -273.1465 162.4233 -273.7734 c
161.8438 -274.4004 161.5542 -275.1758 161.5542 -276.0967 c
161.5542 -277.0293 161.8481 -277.8066 162.436 -278.4277 c
163.0239 -279.0498 163.7559 -279.3604 164.6318 -279.3604 c
165.2197 -279.3604 165.751 -279.2061 166.2256 -278.8984 c
166.7007 -278.5908 167.0708 -278.1533 167.3364 -277.5889 c
169.1763 -277.5889 L
f
*U
*u
172.5249 -280.7686 m
170.8462 -280.7686 L
170.8462 -268.4238 L
172.5249 -268.4238 L
172.5249 -272.502 L
172.7964 -272.1006 173.1484 -271.7979 173.5806 -271.5947 c
174.0132 -271.3906 174.5176 -271.2891 175.0938 -271.2891 c
176.2241 -271.2891 177.1035 -271.6514 177.7305 -272.374 c
178.3579 -273.0977 178.6719 -274.1133 178.6719 -275.4189 c
178.6719 -280.7686 L
176.9932 -280.7686 L
176.9932 -275.9609 L
176.9932 -274.9268 176.8179 -274.1582 176.4673 -273.6543 c
176.1167 -273.1523 175.5801 -272.9004 174.8564 -272.9004 c
174.4155 -272.9004 174.0259 -273.002 173.6865 -273.2061 c
173.3477 -273.4092 173.0762 -273.7031 172.8726 -274.0879 c
172.7485 -274.3193 172.6592 -274.6016 172.6055 -274.9355 c
172.5518 -275.2686 172.5249 -275.7998 172.5249 -276.5283 c
172.5249 -280.7686 L
f
*U
*u
182.3174 -270.3486 m
180.6553 -270.3486 L
180.6553 -268.4238 L
182.3174 -268.4238 l
182.3174 -270.3486 L
f
180.6553 -280.7686 m
180.6553 -271.4424 L
182.3174 -271.4424 L
182.3174 -280.7686 l
180.6553 -280.7686 L
f
*U
*u
184.8862 -280.7686 m
184.8862 -272.9688 L
183.5635 -272.9688 L
183.5635 -271.4424 L
184.8862 -271.4424 L
184.8862 -268.4238 L
186.5562 -268.4238 L
186.5562 -271.4424 L
187.8789 -271.4424 L
187.8789 -272.9688 L
186.5562 -272.9688 L
186.5562 -280.7686 l
184.8862 -280.7686 L
f
*U
*u
196.6279 -280.7686 m
196.6279 -279.623 L
196.1987 -280.0703 195.7197 -280.4072 195.1909 -280.6367 c
194.6626 -280.8652 194.0986 -280.9805 193.4995 -280.9805 c
192.0977 -280.9805 190.9336 -280.5117 190.0068 -279.5771 c
189.0796 -278.6416 188.6162 -277.4697 188.6162 -276.0625 c
188.6162 -275.4072 188.7319 -274.7852 188.9639 -274.1982 c
189.1958 -273.6104 189.5264 -273.0928 189.9561 -272.6465 c
190.4248 -272.1543 190.938 -271.791 191.4946 -271.5566 c
192.0513 -271.3223 192.6855 -271.2051 193.3979 -271.2051 c
194.0366 -271.2051 194.6245 -271.3184 195.1616 -271.5439 c
195.6982 -271.7695 196.187 -272.1113 196.6279 -272.5693 c
196.6279 -271.4424 L
198.3237 -271.4424 L
198.3237 -280.7686 l
196.6279 -280.7686 L
f
1 D
190.3545 -276.0459 m
190.3545 -276.9893 190.6665 -277.7813 191.291 -278.4189 c
191.9155 -279.0586 192.6802 -279.377 193.5845 -279.377 c
194.4097 -279.377 195.1372 -279.0566 195.7676 -278.415 c
196.3979 -277.7734 196.7129 -277.0234 196.7129 -276.165 c
196.7129 -275.249 196.4004 -274.4648 195.7759 -273.8125 c
195.1514 -273.1592 194.4097 -272.832 193.5508 -272.832 c
192.6689 -272.832 191.9155 -273.1436 191.291 -273.7646 c
190.6665 -274.3867 190.3545 -275.1475 190.3545 -276.0459 c
f
*U
*u
0 D
201.9521 -280.7686 m
200.2734 -280.7686 L
200.2734 -271.4424 L
201.8843 -271.4424 L
201.8843 -272.502 L
202.2349 -272.084 202.6206 -271.7773 203.042 -271.582 c
203.4629 -271.3867 203.9448 -271.2891 204.4873 -271.2891 c
205.708 -271.2891 206.645 -271.6484 207.2979 -272.3662 c
207.9507 -273.084 208.2769 -274.1133 208.2769 -275.4521 c
208.2769 -280.7686 L
206.5898 -280.7686 L
206.5898 -275.8164 L
206.5898 -274.8271 206.4063 -274.0938 206.0386 -273.6172 c
205.6714 -273.1396 205.1035 -272.9004 204.3345 -272.9004 c
203.498 -272.9004 202.8921 -273.1816 202.5161 -273.7441 c
202.1401 -274.3066 201.9521 -275.2354 201.9521 -276.5283 c
201.9521 -280.7686 L
f
*U
*u
210.2437 -280.7686 m
210.2437 -268.4238 L
211.9058 -268.4238 L
211.9058 -275.7656 L
215.2285 -271.4424 L
217.1875 -271.4424 L
213.7617 -275.8682 L
217.8145 -280.7686 L
215.6611 -280.7686 L
211.9058 -276.0283 L
211.9058 -280.7686 l
210.2437 -280.7686 L
f
*U
*u
225.7588 -280.7686 m
225.7588 -279.623 L
225.3301 -280.0703 224.8506 -280.4072 224.3223 -280.6367 c
223.7939 -280.8652 223.2295 -280.9805 222.6309 -280.9805 c
221.2285 -280.9805 220.0645 -280.5117 219.1377 -279.5771 c
218.21 -278.6416 217.7471 -277.4697 217.7471 -276.0625 c
217.7471 -275.4072 217.8633 -274.7852 218.0947 -274.1982 c
218.3271 -273.6104 218.6572 -273.0928 219.0869 -272.6465 c
219.5557 -272.1543 220.0684 -271.791 220.625 -271.5566 c
221.1816 -271.3223 221.8164 -271.2051 222.5283 -271.2051 c
223.168 -271.2051 223.7559 -271.3184 224.293 -271.5439 c
224.8291 -271.7695 225.3184 -272.1113 225.7588 -272.5693 c
225.7588 -271.4424 L
227.4551 -271.4424 L
227.4551 -280.7686 l
225.7588 -280.7686 L
f
1 D
219.4854 -276.0459 m
219.4854 -276.9893 219.7979 -277.7813 220.4219 -278.4189 c
221.0469 -279.0586 221.8105 -279.377 222.7148 -279.377 c
223.54 -279.377 224.2686 -279.0566 224.8984 -278.415 c
225.5283 -277.7734 225.8438 -277.0234 225.8438 -276.165 c
225.8438 -275.249 225.5313 -274.4648 224.9063 -273.8125 c
224.2822 -273.1592 223.54 -272.832 222.6816 -272.832 c
221.7998 -272.832 221.0469 -273.1436 220.4219 -273.7646 c
219.7979 -274.3867 219.4854 -275.1475 219.4854 -276.0459 c
f
*U
*u
0 D
231.7441 -280.7686 m
230.0488 -280.7686 L
230.0488 -278.6826 L
231.7441 -278.6826 l
231.7441 -280.7686 L
f
*U
*u
236.0352 -270.3486 m
234.373 -270.3486 L
234.373 -268.4238 L
236.0352 -268.4238 l
236.0352 -270.3486 L
f
234.373 -280.7686 m
234.373 -271.4424 L
236.0352 -271.4424 L
236.0352 -280.7686 l
234.373 -280.7686 L
f
*U
*u
239.7139 -280.7686 m
238.0352 -280.7686 L
238.0352 -271.4424 L
239.6465 -271.4424 L
239.6465 -272.502 L
239.9971 -272.084 240.3818 -271.7773 240.8037 -271.582 c
241.2246 -271.3867 241.7061 -271.2891 242.249 -271.2891 c
243.4697 -271.2891 244.4063 -271.6484 245.0596 -272.3662 c
245.7119 -273.084 246.0391 -274.1133 246.0391 -275.4521 c
246.0391 -280.7686 L
244.3516 -280.7686 L
244.3516 -275.8164 L
244.3516 -274.8271 244.168 -274.0938 243.8008 -273.6172 c
243.4326 -273.1396 242.8652 -272.9004 242.0957 -272.9004 c
241.2598 -272.9004 240.6533 -273.1816 240.2773 -273.7441 c
239.9023 -274.3066 239.7139 -275.2354 239.7139 -276.5283 c
239.7139 -280.7686 L
f
*U
*u
250.1426 -280.7686 m
248.4717 -280.7686 L
248.4717 -272.9004 L
247.3613 -272.9004 L
247.3613 -271.4424 L
248.4209 -271.4424 L
248.4209 -271.1621 L
248.4209 -270.207 248.6865 -269.4878 249.2178 -269.0049 c
249.749 -268.5215 250.5439 -268.2798 251.5996 -268.2798 c
251.5996 -269.8311 L
251.4561 -269.8311 L
250.959 -269.8311 250.6025 -269.9443 250.3887 -270.1704 c
250.1729 -270.3965 250.0654 -270.7754 250.0654 -271.3066 c
250.0654 -271.4424 L
251.5996 -271.4424 L
251.5996 -272.9004 L
250.1426 -272.9004 l
250.1426 -280.7686 L
f
*U
*u
252.2861 -276.1143 m
252.2861 -275.4521 252.3984 -274.835 252.6221 -274.2607 c
252.8447 -273.6875 253.1738 -273.1719 253.6094 -272.7139 c
254.0781 -272.2109 254.6064 -271.8232 255.1943 -271.5518 c
255.7822 -271.2813 256.3936 -271.1455 257.0254 -271.1455 c
257.7041 -271.1455 258.333 -271.2676 258.9121 -271.5098 c
259.4922 -271.7529 260.0156 -272.1113 260.4854 -272.5869 c
260.9434 -273.0557 261.2949 -273.585 261.54 -274.1719 c
261.7861 -274.7598 261.9092 -275.3682 261.9092 -275.9951 c
261.9092 -276.6338 261.7949 -277.2559 261.5654 -277.8604 c
261.3369 -278.4648 261.0156 -278.9932 260.6035 -279.4453 c
260.1289 -279.9648 259.5957 -280.3604 259.0059 -280.6279 c
258.415 -280.8965 257.7861 -281.0313 257.1191 -281.0313 c
256.4355 -281.0313 255.8057 -280.9072 255.2285 -280.6621 c
254.6523 -280.416 254.1348 -280.0527 253.6768 -279.5732 c
253.2422 -279.1143 252.9014 -278.582 252.6563 -277.9746 c
252.4102 -277.3672 252.2861 -276.7461 252.2861 -276.1143 c
f
1 D
254.0244 -276.0967 m
254.0244 -277.0293 254.3193 -277.8066 254.9102 -278.4277 c
255.502 -279.0498 256.2373 -279.3604 257.1191 -279.3604 c
257.9844 -279.3604 258.709 -279.0479 259.2939 -278.4238 c
259.8789 -277.7988 260.1719 -277.0186 260.1719 -276.0801 c
260.1719 -275.1357 259.8789 -274.3564 259.2939 -273.7393 c
258.709 -273.123 257.9785 -272.8154 257.1025 -272.8154 c
256.2314 -272.8154 255.502 -273.1279 254.9102 -273.752 c
254.3193 -274.377 254.0244 -275.1582 254.0244 -276.0967 c
f
*U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
